// src/app/(therapist)/profile/components/EventForm.tsx
import React, { useState } from "react";
import { useCreateEvent } from "@/hooks/api/useCreateEvent";
import { Event } from "@/types/event";
import { useAuth } from "@/hooks/api/useAuth";

const EventForm: React.FC = () => {
  const [eventTitle, setEventTitle] = useState("");
  const [eventDescription, setEventDescription] = useState("");
  const [eventStartDate, setEventStartDate] = useState(""); // Renamed for clarity
  const [eventEndDate, setEventEndDate] = useState(""); // Added for endDate
  const { createEvent, loading, error } = useCreateEvent();
  const { user } = useAuth(); // Get current user's ID (therapistId)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const isValid = [eventTitle, eventDescription, eventStartDate, eventEndDate, user?.id].every(Boolean);
    if (!isValid) return;

    const eventData: Event = {
      id: "", // Placeholder; typically generated by backend
      therapistId: user!.id, // Assuming user.id is the therapistId
      title: eventTitle,
      description: eventDescription,
      startDate: eventStartDate,
      endDate: eventEndDate,
      createdAt: new Date().toISOString(), // Default; may be overridden by backend
      updatedAt: new Date().toISOString(), // Default; may be overridden by backend
      imageUrl: "", // 追加: imageUrl の初期値として空文字を設定
    };

    await createEvent(eventData);
  };

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">イベント登録</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="title" className="block text-sm">
            イベントタイトル
          </label>
          <input
            type="text"
            id="title"
            className="w-full px-4 py-2 border border-gray-300 rounded-md"
            value={eventTitle}
            onChange={(e) => setEventTitle(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm">
            イベント詳細
          </label>
          <textarea
            id="description"
            className="w-full px-4 py-2 border border-gray-300 rounded-md"
            value={eventDescription}
            onChange={(e) => setEventDescription(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="startDate" className="block text-sm">
            開始日付
          </label>
          <input
            type="date"
            id="startDate"
            className="w-full px-4 py-2 border border-gray-300 rounded-md"
            value={eventStartDate}
            onChange={(e) => setEventStartDate(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="endDate" className="block text-sm">
            終了日付
          </label>
          <input
            type="date"
            id="endDate"
            className="w-full px-4 py-2 border border-gray-300 rounded-md"
            value={eventEndDate}
            onChange={(e) => setEventEndDate(e.target.value)}
            required
          />
        </div>
        <button
          type="submit"
          className="w-full bg-blue-500 text-white py-2 rounded-md"
          disabled={loading}
        >
          {loading ? "登録中..." : "登録"}
        </button>
      </form>
      {error && <div className="text-red-500 text-sm">{error.message}</div>}
    </div>
  );
};

export default EventForm;
